/**
 * 暂停x毫秒
 * @param { number } ms
 * @returns { Promise<void> }
 */
export function delay(ms: number): Promise<void>;
/**
 * 将当前Record已有的普通项封装起来，但不阻止其继续扩展
 *
 * @template {object} T
 * @param {T} record - 要封装的Record
 * @returns {Readonly<T>}
 */
export function freezeButExtensible<T extends unknown>(record: T): Readonly<T>;
export function leaveCompatibleEnvironment(): void;
/**
 *
 *
 * @return {never}
 * @throws {Error}
 */
export function jumpToCatchBlock(): never;
/**
 *
 * @return {boolean}
 * @param {function} func
 */
export function isClass(func: Function): boolean;
/**
 * 一个申必的类型转换函数，用于在Javascript中实现`const a = b as unknown as ...`的功能
 *
 * @template T - 目标类型，可通过目标变量自动覆盖，故只需要为目标变量提供类型即可
 * @template U - 原类型，无需单独填写，仅用于消除any
 * @param {U} obj - 需要转换类型的对象
 * @returns {T} 返回原对象，仅类型转换
 *
 * @example
 * ```js
 * // 从某个事件中获取结果
 * const result = await ...
 * // 将结果转换为指定类型
 * // 由于JSDoc中无法重新使用JSDoc注释，故以Typescript说明
 * const card: Card[] = cast(result.links);
 * ```
 */
export function cast<T, U>(obj: U): T;
/** @type { string } */
export const nonameInitialized: string;
export const assetURL: "";
/** @type {typeof Function} */
export const GeneratorFunction: typeof Function;
/** @type {typeof Function} */
export const AsyncFunction: typeof Function;
/** @type {typeof Function} */
export const AsyncGeneratorFunction: typeof Function;
export const userAgent: string;
export const userAgentLowerCase: string;
export const characterDefaultPicturePath: "image/character/default_silhouette_";
export const device: "android" | "ios";
export const androidNewStandardApp: boolean;
/**
 * 不能被new的类
 */
export class Uninstantable {
}
export let compatibleEnvironment: boolean;
