/**
 * @implements { PromiseLike<Omit<GameEvent,"then">> }
 */
export class GameEvent implements PromiseLike<Omit<GameEvent, "then">> {
    static initialGameEvent(): GameEvent;
    /**
     * @param { string | GameEvent } [name]
     * @param { boolean } [trigger]
     * @param { GameEventManager } [manager]
     */
    constructor(name?: string | GameEvent | undefined, trigger?: boolean | undefined, manager?: GameEventManager | undefined);
    /**
     * @type { string }
     */
    name: string;
    /**
     * @type { GameEventManager }
     */
    manager: GameEventManager;
    /**
     * @type { number | null }
     */
    _triggered: number | null;
    /**
     * @type { Result }
     */
    result: Result;
    /**
     * @type { string }
     */
    type: string;
    /**
     * @type { Player }
     */
    source: Player;
    /**
     * @type { Player }
     */
    player: Player;
    /**
     * @type { Player[] }
     */
    players: Player[];
    /**
     * @type { Player }
     */
    target: Player;
    /**
     * @type { Player[] }
     */
    targets: Player[];
    /**
     * @type { Card }
     */
    card: Card;
    /**
     * @type { Card[] }
     */
    cards: Card[];
    /**
     * @type { string }
     */
    skill: string;
    /**
     * @type { boolean }
     */
    forced: boolean;
    /**
     * @type { number }
     */
    num: number;
    /**
     * @type { number }
     */
    original_num: number;
    /**
     * @type { GameEvent }
     */
    _trigger: GameEvent;
    /**
     * @type { string }
     */
    triggername: string;
    /**
     * @type { boolean }
     */
    notrigger: boolean;
    /**
     * @type { Player[] }
     */
    _notrigger: Player[];
    /**
     * @type { Result }
     */
    _result: Result;
    /**
     * @type { any[] }
     */
    _args: any[];
    /**
     * @type { [string, any][] }
     */
    _set: [string, any][];
    /**
     * @type { {
     *  add: {[type: string]: () => void}
     *  replace: {[type :string]: () => void}
     * } }
     */
    custom: {
        add: {
            [type: string]: () => void;
        };
        replace: {
            [type: string]: () => void;
        };
    };
    /**
     * @type { boolean }
     */
    directHit: boolean;
    /**
     * @type { number }
     */
    baseDamage: number;
    /**
     * @type { number }
     */
    extraDamage: number;
    /**
     * @type { Player }
     */
    customSource: Player;
    /**
     * @type { string }
     */
    nature: string;
    /**
     * @type { boolean }
     */
    unreal: boolean;
    /**
     * @type { Button[] }
     */
    excludeButton: Button[];
    /**
     * @type { ((this: this) => boolean) | undefined }
     */
    filterStop: ((this: this) => boolean) | undefined;
    /**
     * @type { Result['cost_data'] }
     */
    cost_data: Result["cost_data"];
    /**
     * @type { boolean }
     */
    responded: boolean;
    /**
     * @type { string | undefined }
     */
    judgestr: string | undefined;
    /**
     * @type { boolean }
     */
    judging: boolean;
    /**
     * @type { Function | undefined }
     */
    judge2: Function | undefined;
    /**
     * @type { Card[] }
     */
    orderingCards: Card[];
    /**
     * @type { Function | undefined }
     */
    ai: Function | undefined;
    /**
     * @type { string[] }
     */
    _aiexclude: string[];
    /**
     * @type { boolean }
     */
    forceDie: boolean;
    /**
     * @type { Function | undefined }
     */
    _oncancel: Function | undefined;
    /**
     * @type { boolean }
     */
    includeOut: boolean;
    /**
     * @param {keyof this} key
     * @param {number} [value]
     * @param {number} [baseValue]
     */
    addNumber(key: keyof this, value?: number | undefined, baseValue?: number | undefined): this;
    /**
     * @param {keyof this} key
     * @param {number} [baseValue]
     */
    decrease(key: keyof this, baseValue?: number | undefined): this;
    /**
     * @param {keyof this} key
     * @param {number} [baseValue]
     */
    increase(key: keyof this, baseValue?: number | undefined): this;
    /**
     * @param {keyof this} key
     * @param {number} [value]
     * @param {number} [baseValue]
     */
    subtractNumber(key: keyof this, value?: number | undefined, baseValue?: number | undefined): this;
    /**
     * @param {Parameters<typeof this.hasHandler>[0]} type
     * @param {GameEvent} event
     * @param {{
     * state?: 'begin' | 'end';
     * }} option
     * @returns {this}
     */
    callHandler(type: Parameters<typeof this.hasHandler>[0], event: GameEvent, option: {
        state?: "begin" | "end";
    }): this;
    getDefaultHandlerType(): string;
    getDefaultNextHandlerType(): string;
    /**
     * @param {Parameters<typeof this.hasHandler>[0]} [type]
     * @returns {((event: GameEvent, option: {
     * state?: 'begin' | 'end';
     * }) => void)[]}
     */
    getHandler(type?: Parameters<typeof this.hasHandler>[0]): ((event: GameEvent, option: {
        state?: "begin" | "end";
    }) => void)[];
    /**
     * @param {`on${Capitalize<string>}`} [type]
     */
    hasHandler(type?: `on${Capitalize<string>}` | undefined): boolean;
    /**
     * @overload
     * @param {...((event: GameEvent, option: {
     * state?: 'begin' | 'end';
     * }) => void)[]} handlers
     * @returns {number}
     */
    pushHandler(...handlers: ((event: GameEvent, option: {
        state?: "begin" | "end";
    }) => void)[][]): number;
    /**
     * @overload
     * @param {Parameters<typeof this.hasHandler>[0]} type
     * @param {...((event: GameEvent, option: {
     * state?: 'begin' | 'end';
     * }) => void)[]} handlers
     * @returns {number}
     */
    pushHandler(type: Parameters<typeof this.hasHandler>[0], ...handlers: ((event: GameEvent, option: {
        state?: "begin" | "end";
    }) => void)[][]): number;
    putStepCache(key: any, value: any): this;
    _stepCache: {} | undefined;
    getStepCache(key: any): any;
    clearStepCache(key: any): this;
    callFuncUseStepCache(prefix: any, func: any, params: any): any;
    putTempCache(key1: any, key2: any, value: any): any;
    _tempCache: {} | undefined;
    getTempCache(key1: any, key2: any): any;
    changeToZero(): this;
    numFixed: boolean | undefined;
    finish(): void;
    /**
     * @type { boolean }
     */
    finished: boolean;
    cancel(all: any, player: any, notrigger: any): GameEvent | undefined;
    neutralize(event?: any): Promise<Omit<GameEvent, "then"> | undefined>;
    /**
     * @type { boolean }
     */
    _neutralized: boolean;
    _neutralize_event: any;
    unneutralize(): void;
    goto(step: any): this;
    set step(num: number);
    get step(): number;
    redo(): this;
    setHiddenSkill(skill: any): this;
    set(key: any, value: any, ...args: any[]): this;
    /**
     * @param {import("./GameEvent/compilers/IContentCompiler.js").EventCompileable} content
     */
    setContent(content: import("./GameEvent/compilers/IContentCompiler.js").EventCompileable): this;
    /**
     * @type { import("./GameEvent/compilers/IContentCompiler.js").EventCompiledContent }
     */
    content: import("./GameEvent/compilers/IContentCompiler.js").EventCompiledContent;
    getLogv(): any;
    send(): this;
    resume(): this;
    /**
     * 获取事件的父节点。
     * 获取事件链上的指定事件。
     * 默认获取上一个父节点（核心）。
     * @param {number|string|((evt:GameEvent)=>boolean)} [level=1] 获取深度（number）/指定名字（string）/指定特征（function）
     * @param {boolean} [forced] 若获取不到节点，默认返回{}，若forced为true则返回null
     * @param {boolean} [includeSelf] 若level不是数字，指定搜索时是否包含事件本身
     * @returns {GameEvent|{}|null}
     */
    getParent(level?: string | number | ((evt: GameEvent) => boolean) | undefined, forced?: boolean | undefined, includeSelf?: boolean | undefined): GameEvent | {} | null;
    getTrigger(): any;
    getRand(name: any): any;
    _rand_map: {} | undefined;
    _rand: number | undefined;
    insert(content: any, map: any): GameEvent;
    insertAfter(content: any, map: any): GameEvent;
    backup(skill: any): this;
    _backup: any;
    filterButton: any;
    selectButton: any;
    filterTarget: any;
    selectTarget: any;
    ignoreMod: boolean | undefined;
    filterCard2: any;
    filterCard: any;
    filterOk: any;
    selectCard: any;
    position: any;
    complexSelect: any;
    complexCard: any;
    complexTarget: any;
    ai1: any;
    ai2: any;
    restore(): this;
    fakeforce: any;
    _buttonChoice: any;
    _cardChoice: any;
    _targetChoice: any;
    _skillChoice: any;
    isMine(): any;
    isOnline(): any;
    notLink(): boolean;
    isPhaseUsing(player: any): boolean;
    addTrigger(skills: any, player: any): this;
    removeTrigger(skills: any, player: any): this;
    /**
     *
     * @param { string } name
     * @returns { GameEvent }
     */
    trigger(name: string): GameEvent;
    untrigger(all: boolean | undefined, player: any): this;
    /**
     * @deprecated
     */
    toPromise(): this;
    /**
     * @deprecated
     */
    toEvent(): this;
    /**
     * @type { GameEvent | void | null }
     */
    parent: GameEvent | void | null;
    /**
     * @type { GameEvent[] }
     */
    childEvents: GameEvent[];
    /**
     * @type { GameEvent | undefined }
     */
    _triggering: GameEvent | undefined;
    updateStep(): void;
    /**
     * @type { GameEvent[] }
     */
    next: GameEvent[];
    /**
     * @type { GameEvent[] }
     */
    after: GameEvent[];
    /**
     * @template TResult1
     * @template TResult2
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param { ((event: Omit<GameEvent,"then">) => TResult1 | Promise<TResult1>) | null } [onfulfilled] The callback to execute when the Promise is resolved.
     * @param { ((reason: any) => TResult2 | Promise<TResult2>) | null } [onrejected] The callback to execute when the Promise is rejected.
     * @returns { Promise<TResult1 | TResult2> } A Promise for the completion of which ever callback is executed.
     */
    then<TResult1, TResult2>(onfulfilled?: ((event: Omit<GameEvent, "then">) => TResult1 | Promise<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | null | undefined): Promise<TResult1 | TResult2>;
    /**
     * @template TResult
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.* @param { ((reason: any) => TResult | Promise<TResult>) | null } [onrejected] The callback to execute when the Promise is rejected.
     * @returns { Promise<Omit<GameEvent,"then"> | TResult> } A Promise for the completion of which ever callback is executed.
     */
    catch<TResult>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | null | undefined): Promise<Omit<GameEvent, "then"> | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param { (() => void) | null } [onfinally] The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns { Promise<Omit<GameEvent,"then">> } A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | null | undefined): Promise<Omit<GameEvent, "then">>;
    resolve(): void;
    start(): Promise<void>;
    loop(): Promise<void>;
    checkSkipped(): Promise<boolean>;
    waitNext(): Promise<void | Result>;
    /**
     * 获取 Result 对象中的信息。
     * @example
     * ```js
     // 示例 1：
     const chooseCardResult = await player.chooseCard().forResult();
     // 获取整个结果对象，然后访问如 chooseCardResult.cards 等属性
     
     // 示例 2：
     const cards = await player.chooseCard().forResult('cards');
     // 获取结果对象中 'cards' 属性的值
     
     // 示例 3：
     const [success, cards, targets] = await player.chooseCardTarget().forResult('bool', 'cards', 'targets');
     // 获取结果对象中多个属性的值
     // - success 表示是否成功
     // - cards 表示选择的卡片
     // - targets 表示选择的目标
     ```
     * @template {keyof Result} T
     * @this GameEvent
     * @overload
     * @returns {Promise<Result>}
     *
     * @overload
     * @param {T} param0
     * @returns {Promise<Exclude<Result[T], undefined>>}
     *
     * @overload
     * @param { T[] } params
     * @returns { Promise<Exclude<Result[T], undefined>[]> }
     */
    forResult<T extends keyof Result>(): Promise<Result>;
    /**
     * 获取 Result 对象中的信息。
     * @example
     * ```js
     // 示例 1：
     const chooseCardResult = await player.chooseCard().forResult();
     // 获取整个结果对象，然后访问如 chooseCardResult.cards 等属性
     
     // 示例 2：
     const cards = await player.chooseCard().forResult('cards');
     // 获取结果对象中 'cards' 属性的值
     
     // 示例 3：
     const [success, cards, targets] = await player.chooseCardTarget().forResult('bool', 'cards', 'targets');
     // 获取结果对象中多个属性的值
     // - success 表示是否成功
     // - cards 表示选择的卡片
     // - targets 表示选择的目标
     ```
     * @template {keyof Result} T
     * @this GameEvent
     * @overload
     * @returns {Promise<Result>}
     *
     * @overload
     * @param {T} param0
     * @returns {Promise<Exclude<Result[T], undefined>>}
     *
     * @overload
     * @param { T[] } params
     * @returns { Promise<Exclude<Result[T], undefined>[]> }
     */
    forResult<T extends keyof Result>(param0: T): Promise<Exclude<Result[T], undefined>>;
    /**
     * 获取 Result 对象中的信息。
     * @example
     * ```js
     // 示例 1：
     const chooseCardResult = await player.chooseCard().forResult();
     // 获取整个结果对象，然后访问如 chooseCardResult.cards 等属性
     
     // 示例 2：
     const cards = await player.chooseCard().forResult('cards');
     // 获取结果对象中 'cards' 属性的值
     
     // 示例 3：
     const [success, cards, targets] = await player.chooseCardTarget().forResult('bool', 'cards', 'targets');
     // 获取结果对象中多个属性的值
     // - success 表示是否成功
     // - cards 表示选择的卡片
     // - targets 表示选择的目标
     ```
     * @template {keyof Result} T
     * @this GameEvent
     * @overload
     * @returns {Promise<Result>}
     *
     * @overload
     * @param {T} param0
     * @returns {Promise<Exclude<Result[T], undefined>>}
     *
     * @overload
     * @param { T[] } params
     * @returns { Promise<Exclude<Result[T], undefined>[]> }
     */
    forResult<T extends keyof Result>(params: T[]): Promise<Exclude<Result[T], undefined>[]>;
    /**
     * 返回result中的bool项
     */
    forResultBool(): Promise<boolean>;
    /**
     * 返回result中的targets项。
     */
    forResultTargets(): Promise<any[]>;
    /**
     * 返回result中的cards项
     */
    forResultCards(): Promise<any[]>;
    /**
     * 返回result中的card项
     *
     * @returns {Promise<VCard>|Promise<Card>} 返回的card项。
     *
     */
    forResultCard(): Promise<VCard> | Promise<Card>;
    /**
     * 返回result中的control项。
     */
    forResultControl(): Promise<string>;
    /**
     * 返回result中的links项。
     */
    forResultLinks(): Promise<any[]>;
    /**
     * 在某个异步事件中调试变量信息
     *
     * 注: 在调试步骤中`定义的变量只在当前输入的语句有效`
     *
     * @example
     * 在技能中调试技能content相关的信息
     * ```js
     * await event.debugger();
     * ```
     * 在技能中调试触发此技能事件的相关的信息
     * ```js
     * await trigger.debugger();
     * ```
     */
    debugger(): Promise<void>;
    #private;
}
import GameEventManager from "./GameEvent/GameEventManager.js";
import ContentCompiler from "./GameEvent/compilers/ContentCompiler.js";
export { GameEventManager, ContentCompiler };
